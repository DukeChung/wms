@using NBK.ECService.WMS.Utility.Enum
@using NBK.WMS.Portal.Helpers
@using NBK.AuthServiceUtil
@model NBK.ECService.WMS.DTO.OutboundViewDto

@{
    ViewBag.Title = "异常登记";
}

@Html.Breadcrumb("出库单管理", "/Outbound/OutboundMaintain", "异常登记")


@section Styles {
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
}

<input type="hidden" id="outboundSysId" value="@ViewBag.OutboundSysId" />

<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="ibox-content m-b-sm border-bottom">
        <table id="gvExceptionTable" class="table table-striped table-bordered table-hover dataTables-example">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="ckbAll" onclick="outboudExceptionDetial.gvExceptionTableCheckAll(this);" />
                    </th>
                    <th width="8%" data-data="UPC">商品条码</th>
                    <th width="12%" data-data="SkuName">商品名称</th>
                    <th width="10%" data-data="ExceptionReason">异常类型</th>
                    <th data-data="ExceptionQty">异常数量</th>
                    <th width="13%" data-data="ExceptionDesc">异常描述</th>
                    <th width="13%" data-data="Result">跟进结果</th>
                    <th width="10%" data-data="Department">责任部门</th>
                    <th width="13%" data-data="Responsibility">责任归属与处理</th>
                    <th data-data="Remark">备注</th>
                    <th width="5%" data-data="IsSettlement">是否理赔</th>
                </tr>
            </thead>
        </table>

        <div class="text-right tooltip-demo">
            <a class="btn btn-sm btn-primary" id="btnAdd"><i class="fa fa-check-square-o"></i> 保存</a>
            <a class="btn btn-white btn-sm" id="btnReturn"><i class="fa fa-times"></i> 返回</a>
        </div>
    </div>


    <div class="ibox-content">
        <div class="row">
            <div class="col-sm-3">
                @Html.SearchTextBox("商品名称", "SkuName")
            </div>
            <div class="col-sm-3">
                @Html.SearchTextBox("商品条码", "UPC")
            </div>
            <div class="col-sm-3">
                <button id="btnSearch" class="btn btn-primary" type="button" style="margin-top: 25px; float: left;">查询</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="ibox">
                <div class="ibox-content">
                    <table id="gvOutboundDetail" class="table table-striped table-bordered table-hover dataTables-example">
                        <thead>
                            <tr>
                                <th width="5%"><input type="checkbox" id="ckbAll" onclick="outboudExceptionDetial.gvTableCheckAllById('gvOutboundDetail', this);" /></th>
                                <th data-data="UPC">商品条码</th>
                                <th data-data="SkuName">商品名称</th>
                                <th data-data="SkuDescr">商品描述</th>
                                <th data-data="DisplayQty">数量</th>
                                <th data-data="UOMCode">单位</th>
                                <th data-data="PackFactor">包装系数</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/plugins/chosen")

    <script>
        var outboudExceptionDetial = {
            table: {},
            exceptionTable: {},
            ExceptionSkuListSource: {},
            addExceptionSkuList: {},
            init: function () {
                var _self = this;
                //出库单明细商品列表
                _self.table = $('#gvOutboundDetail').DataTable({
                    "sAjaxSource": "GetOutboundDetailList",
                    "fnServerParams": function (aoData) { //查询条件
                        aoData.push(
                            { "name": "OutboundSysId", "value": $("#outboundSysId").val() },
                            { "name": "UPC", "value": $("#UPC").val() },
                            { "name": "SkuName", "value": $("#SkuName").val() }
                        );
                    },
                    dom: 'Bfrtip',
                    buttons: [
                         {
                             text: '添加',
                             action: function (e, dt, node, config) {
                                 AddExceptionSku();
                             }
                         }
                    ],
                    "columnDefs": [
                        {
                            "targets": 0,
                            "width": "15px",
                            render: function (data, type, full, meta) {
                                return '<input type="checkbox" id="checkbox-all-' + full.SysId + '" value="' + full.SysId + '" />';
                            }
                        }
                    ],
                    //"scrollX": true,
                    "bServerSide": true,
                    "bProcessing": true,
                    "bPaginate": true, //翻页功能
                    "bLengthChange": true, //改变每页显示数据数量
                    "bFilter": false, //过滤功能
                    "bSort": false, //排序功能
                    "bInfo": true, //页脚信息
                    "bAutoWidth": true, //自动宽度
                    "aaSorting": [[2, "Asc"]],
                    "oLanguage": {
                        "sLengthMenu": "每页显示 _MENU_ 条记录",
                        "sInfo": "从 _START_ 到 _END_ /共 _TOTAL_ 条数据",
                        "sInfoEmpty": "",
                        "sInfoFiltered": "(从 _MAX_ 条数据中检索)",
                        "oPaginate": {
                            "sFirst": "首页",
                            "sPrevious": "前一页",
                            "sNext": "后一页",
                            "sLast": "尾页"
                        },
                        "sZeroRecords": "没有检索到数据"
                    }
                });

                //异常商量列表
                _self.exceptionTable = $("#gvExceptionTable").DataTable({
                    data: _self.ExceptionSkuListSource,
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            text: '删除',
                            action: function (e, dt, node, config) {
                                var sysIdList = GetGridMultiselectSysIdByClass('checkbox-select-class');
                                if (sysIdList != null) {

                                    //删除数据
                                    $.ajax({
                                        url: "/Outbound/DeleteOutboundException?sysIdList=" + sysIdList + "&sysId=" + $("#outboundSysId").val(),
                                        type: "get",
                                        success: function (data) {
                                            if (data.Success) {
                                                //移除数据
                                                outboudExceptionDetial.exceptionTable
                                                    .rows(':has(:checkbox[class=checkbox-select-class]:checked)')
                                                    .remove()
                                                    .draw();
                                            }
                                            else {
                                                msgErro(data.Message);
                                            }
                                        }
                                    });
                                }
                            },
                        }
                    ],
                    "columnDefs": [
                            {
                                "targets": 0,
                                "width": "15px",
                                render: function (data, type, full, meta) {
                                    return '<input type="checkbox" class="checkbox-select-class" id="checkbox-all-' + full.OutboundDetailSysId + '" value="' + full.SysId + '" />';
                                }
                            },
                            {
                                "targets": 3,
                                render: function (data, type, full, meta) {
                                    if (full.ExceptionReason == null) {
                                        full.ExceptionReason = '';
                                    }
                                    return '<input type="text" onblur="outboudExceptionDetial.exceptionReasonBlur(this)" id="" value="' + full.ExceptionReason + '"  style="width:80%" />';
                                }
                            },
                            {
                                "targets": 4,
                                "width": "80px",
                                render: function (data, type, full, meta) {
                                    return '<input type="number" onblur="outboudExceptionDetial.exceptionQtyBlur(this)" id="" style="width:80px;" value="' + full.ExceptionQty + '"  style="width:80%" />';
                                }
                            },
                            {
                                "targets": 5,
                                render: function (data, type, full, meta) {
                                    if (full.ExceptionDesc == null) {
                                        full.ExceptionDesc = '';
                                    }
                                    return '<input type="text" onblur="outboudExceptionDetial.exceptionDescBlur(this)" value="' + full.ExceptionDesc + '"  style="width:80%" />';
                                }
                            },
                            {
                                "targets": 6,
                                render: function (data, type, full, meta) {
                                    if (full.Result == null) {
                                        full.Result = '';
                                    }
                                    return '<input type="text" onblur="outboudExceptionDetial.resultBlur(this)" value="' + full.Result + '"  style="width:80%" />';
                                }
                            },
                            {
                                "targets": 7,
                                render: function (data, type, full, meta) {
                                    if (full.Department == null) {
                                        full.Department = '';
                                    }
                                    return '<input type="text" onblur="outboudExceptionDetial.departmentBlur(this)" value="' + full.Department + '"  style="width:80%"  />';
                                }
                            },
                            {
                                "targets": 8,
                                render: function (data, type, full, meta) {
                                    if (full.Responsibility == null) {
                                        full.Responsibility = '';
                                    }
                                    return '<input type="text" onblur="outboudExceptionDetial.responsibilityBlur(this)" value="' + full.Responsibility + '"  style="width:80%" />';
                                }
                            },
                            {
                                "targets": 9,
                                render: function (data, type, full, meta) {
                                    if (full.Remark == null) {
                                        full.Remark = '';
                                    }
                                    return '<input type="text" onblur="outboudExceptionDetial.remarkBlur(this)" value="' + full.Remark + '"  style="width:80%"  />';
                                }
                            },
                            {
                                "targets": 10,
                                render: function (data, type, full, meta) {
                                    if (full.IsSettlement != '' && full.IsSettlement) {
                                        return '<input type="checkbox" onclick="outboudExceptionDetial.isSettlementBlur(this)" checked="checked" value="' + full.IsSettlement + '"/>';
                                    } else {
                                        return '<input type="checkbox" onclick="outboudExceptionDetial.isSettlementBlur(this)" value="' + full.IsSettlement + '"/>';
                                    }
                                }
                            }
                    ],
                    //"scrollX": true,
                    "bServerSide": false,
                    "bProcessing": true,
                    "bPaginate": false, //翻页功能
                    "bLengthChange": true, //改变每页显示数据数量
                    "bFilter": false, //过滤功能
                    "bSort": false, //排序功能
                    "bInfo": true, //页脚信息
                    "bAutoWidth": true, //自动宽度
                    "oLanguage": {
                        "sLengthMenu": "每页显示 _MENU_ 条记录",
                        "sInfo": "从 _START_ 到 _END_ /共 _TOTAL_ 条数据",
                        "sInfoEmpty": "",
                        "sInfoFiltered": "(从 _MAX_ 条数据中检索)",
                        "oPaginate": {
                            "sFirst": "首页",
                            "sPrevious": "前一页",
                            "sNext": "后一页",
                            "sLast": "尾页"
                        },
                        "sZeroRecords": "没有检索到数据"
                    }
                });

                //初始化异常列表数据
                $.ajax({
                    url: "/Outbound/GetOutbooundExceptionData?sysId=" + $("#outboundSysId").val(),
                    type: "get",
                    success: function (data) {
                        if (data.Success) {
                            _self.ExceptionSkuListSource = data.Data;
                            outboudExceptionDetial.exceptionTable.rows.add(_self.ExceptionSkuListSource).draw();
                        }
                    }
                });

                //出库单明细商品查询
                $("#btnSearch").bind("click", function () {
                    outboudExceptionDetial.table.ajax.reload();
                });

                //返回出库单明细页面
                $("#btnReturn").bind("click", function () {
                    outboudExceptionDetial.backParentPage();
                });

                //保存异常记录
                var flag = false;
                $("#btnAdd").bind("click", function () {
                    if (flag) {
                        return;
                    }
                    flag = true;
                    var exception = outboudExceptionDetial.exceptionTable.data();
                    if (exception.length == 0) {
                        msgAlert("请至少选择一个异常商品");
                        flag = false;
                        return;
                    }
                    var isReturn = false;
                    exception.each(function (index) {
                        if (index.ExceptionQty == 0 || index.ExceptionQty == '') {
                            msgAlert("请确保每个异常商品的异常数量都大于0");
                            flag = false;
                            isReturn = true;
                        }
                    });

                    if (isReturn) {
                        return;
                    }

                    saveLoading('show');
                    var exceptionData = outboudExceptionDetial.getExceptionSkuList();
                    var requestData = {
                        OutboundSysId: $("#outboundSysId").val(),
                        OutboundExceptionDtoList: exceptionData
                    };

                    $.ajax({
                        url: "@Url.Action("AddOutboundExceptionService", "Outbound")",
                        data: requestData,
                        dataType: "json",
                        type: "post",
                        success: function (data) {
                            saveLoading('hide');
                            flag = false;
                            if (data.Success) {
                                msgSuccess("保存成功!");
                                outboudExceptionDetial.backParentPage();
                            }
                            else {
                                msgErro(data.Message);
                            }
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            saveLoading('hide');
                            flag = false;
                            msgErro("操作失败！");
                        }
                    });

                });
            },
            //返回上一页面
            backParentPage: function () {
                window.location.href = '/Outbound/OutboundView?sysId=' + $("#outboundSysId").val();
            },
            //获取异常记录数据
            getExceptionSkuList: function (obj) {
                var exceptionList = [];
                var exceptionTableData = outboudExceptionDetial.exceptionTable.data();
                for (var i = 0; i < exceptionTableData.length; i++) {
                    exceptionTableData[i].ExceptionQty = parseInt(exceptionTableData[i].ExceptionQty);
                    exceptionList.push(exceptionTableData[i]);
                }
                return exceptionList;
            },
            //全选异常列表
            gvExceptionTableCheckAll: function (obj) {
                $("#gvExceptionTable .checkbox-select-class").each(function () {
                    this.checked = obj.checked;
                });
            },
            //异常数量失去焦点
            exceptionQtyBlur: function (obj) {
                var inputVal = $(obj).val();
                var selectIndex = $(obj).parent().parent().index();
                var maxVal = outboudExceptionDetial.exceptionTable.data()[selectIndex]["MaxQty"];

                if (inputVal < 0) {
                    $(obj).val('0');
                    outboudExceptionDetial.exceptionTable.data()[selectIndex]["ExceptionQty"] = 0;
                    $(obj).focus();
                    return;
                }

                if (parseInt(inputVal) > parseInt(maxVal)) {
                    msgAlert("异常数量不能超过出库数量：" + maxVal);
                    $(obj).val(maxVal);
                    outboudExceptionDetial.exceptionTable.data()[selectIndex]["ExceptionQty"] = maxVal;
                    $(obj).focus();
                    return;
                }
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["ExceptionQty"] = $(obj).val();
            },
            //异常类型失去焦点
            exceptionReasonBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["ExceptionReason"] = $(obj).val();
            },
            //异常描述失去焦点
            exceptionDescBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["ExceptionDesc"] = $(obj).val();
            },
            //跟进结果失去焦点
            resultBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["Result"] = $(obj).val();
            },
            //责任部门失去焦点
            departmentBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["Department"] = $(obj).val();
            },
            //责任归属于处理失去焦点
            responsibilityBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["Responsibility"] = $(obj).val();
            },
            //备注失去焦点
            remarkBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                outboudExceptionDetial.exceptionTable.data()[selectIndex]["Remark"] = $(obj).val();
            },
            //备注失去焦点
            isSettlementBlur: function (obj) {
                var selectIndex = $(obj).parent().parent().index();
                if ($(obj).is(':checked')) {
                    outboudExceptionDetial.exceptionTable.data()[selectIndex]["IsSettlement"] = true;
                } else {
                    outboudExceptionDetial.exceptionTable.data()[selectIndex]["IsSettlement"] = false;
                }
            },
            //根据ID获取焦点
            gvTableCheckAllById(id, obj) {
                $("#" + id + " tbody input[type='checkbox']").each(function () {
                    this.checked = obj.checked;
                });
            }
        };


        $(function () {
            outboudExceptionDetial.init();
        });

        //添加出库单明细中商品到异常列表中
        function AddExceptionSku() {
            var sysIdList = GetGridMultiselectSysIdById('gvOutboundDetail');
            if (sysIdList != null) {
                var arr = outboudExceptionDetial.table.rows(':has(:checkbox:checked)');
                var exceptionList = outboudExceptionDetial.getExceptionSkuList();

                $.each(arr.data(), function (i) {
                    var selectSku = this;
                    var isAdd = false;
                    if (exceptionList.length > 0) {
                        for (var i = 0; i < exceptionList.length ; i++) {
                            if (exceptionList[i].SkuSysId == selectSku.SkuSysId && exceptionList[i].OutboundDetailSysId == selectSku.SysId) {
                                isAdd = true;
                                break;
                            }
                        }
                    }
                    if (!isAdd) {
                        outboudExceptionDetial.exceptionTable.rows.add([{
                            "SysId": '',
                            'OutboundSysId': $("#outboundSysId").val(),
                            "OutboundDetailSysId": selectSku.SysId,
                            "SkuSysId": selectSku.SkuSysId,
                            "SkuName": selectSku.SkuName,
                            "UPC": selectSku.UPC,
                            "MaxQty": selectSku.Qty,
                            "ExceptionReason": '',
                            "ExceptionQty": 0,
                            "ExceptionDesc": '',
                            "Result": '',
                            "Department": '',
                            "Responsibility": '',
                            "Remark": '',
                            "IsSettlement": false
                        }]).draw();
                    }
                });
                msgAlert("添加完成！(注:已添加商品不会被重复添加)");
            }
        }
    </script>
}
